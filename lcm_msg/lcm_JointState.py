"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcm_JointState(object):
    __slots__ = ["num_joint", "velocity", "postiion", "effort", "name"]

    __typenames__ = ["int32_t", "float", "float", "float", "string"]

    __dimensions__ = [None, ["num_joint"], ["num_joint"], ["num_joint"], ["num_joint"]]

    def __init__(self):
        self.num_joint = 0
        self.velocity = []
        self.postiion = []
        self.effort = []
        self.name = []

    def encode(self):
        buf = BytesIO()
        buf.write(lcm_JointState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_joint))
        buf.write(struct.pack('>%df' % self.num_joint, *self.velocity[:self.num_joint]))
        buf.write(struct.pack('>%df' % self.num_joint, *self.postiion[:self.num_joint]))
        buf.write(struct.pack('>%df' % self.num_joint, *self.effort[:self.num_joint]))
        for i0 in range(self.num_joint):
            __name_encoded = self.name[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__name_encoded)+1))
            buf.write(__name_encoded)
            buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcm_JointState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcm_JointState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcm_JointState()
        self.num_joint = struct.unpack(">i", buf.read(4))[0]
        self.velocity = struct.unpack('>%df' % self.num_joint, buf.read(self.num_joint * 4))
        self.postiion = struct.unpack('>%df' % self.num_joint, buf.read(self.num_joint * 4))
        self.effort = struct.unpack('>%df' % self.num_joint, buf.read(self.num_joint * 4))
        self.name = []
        for i0 in range(self.num_joint):
            __name_len = struct.unpack('>I', buf.read(4))[0]
            self.name.append(buf.read(__name_len)[:-1].decode('utf-8', 'replace'))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if lcm_JointState in parents: return 0
        tmphash = (0xbd05578612080d18) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcm_JointState._packed_fingerprint is None:
            lcm_JointState._packed_fingerprint = struct.pack(">Q", lcm_JointState._get_hash_recursive([]))
        return lcm_JointState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", lcm_JointState._get_packed_fingerprint())[0]

